In this assignment, you are asked to implement a peer-to-peer file transfer application. The application consists of two components: a tracker, which tracks all peers (including their addresses and their files), and a peer, which both offers files to the other peers and may also download files from the other peers.
The Tracker

The tracker should start using the following command:

% ./tracker [port-number]
If the port number is not given, it uses the default port number 5000.

The tracker needs to handle the connections from all peers. When a peer connects to the tracker, it'll first send the port number (through which it will accept connections from other peers for file download), as well as the content of its current directory (i.e., the files the peer is willing to share). The tracker will put the names of the files in a collection list together with the peer's ip address and port number. This list will be given to the peers who want it subsequently.

When the tracker detects a client connection is down, i.e., the peer leaves either by issuing 'exit' command or simply by hitting control-c, for example, the tracker needs to remove all the files offered by the peer from the collection list.

The Peer

The peer should start using the following command:

% ./peer <tracker-hostname> [tracker-port-number] [peer-port-number]
If both tracker's port number and the peer's port number are not given, it uses the default port number 5000 for the tracker and 6000 for the peer. If the peer's port number is not given, it uses the default port number 6000.

As soon as the peer starts, it will: 

Make a TCP connection to the tracker (at the given hostname and port number)
Through the connection, send the peer's port number and the list of files at the current directory to the tracker (just the files, not directories such as . and ..)
Create a separate server process servicing incoming download requests from other peers at the given peer's port number. (You've done similar things in your homework assignment; the peer server should be able to handle multiple transfers simultaneously). 
The peer will then accepts commands from user from standard input (keyboard). Here is a list of commands explained in the following example (assuming the tracker is already running on port 5678 of the machine named netcentric.cis.fiu.edu; you can use the name localhost if you want to test on the same machine, but make sure you use different directories for different peers):

% ./peer netcentric.cis.fiu.edu 5678 6789
Connected to tracker: netcentric.cis.fiu.edu:5678, successful.
Sent file list to tracker, successful.
Servicing and waiting for download requests on port 6789.
Now awaiting your command...

> list
[0] file1 131.94.130.178:6000
[1] file2 131.94.130.178:6000
[2] file1 131.94.130.144:6789
[3] file3 131.94.130.144:6789
...
(The peer sends a "list" command to the tracker, who responds with the collection list displayed here; note that it's OK the same file name may appear at different peers.)

> download 1
file2 downloaded successfully.
(The peer makes a separate TCP connection to the peer 131.94.130.178 at 6000 to download file2; you may make it more user friendly by showing some progress while downloading. Note that the peer may not download files that it already has, in which case the peer must prompt the user accordingly. If there are errors during the file transfer, make sure the user is promptly notified.)

> exit
Connection to tracker netcentric.cis.fiu.edu:5678 terminated. 
File server at port 6789 terminated. 
Bye now!
(Upon a peer's termination, the tracker should de-list all files belonging to the peer. Also note that the peer should terminate its server process upon exiting (or you'd leave a hole open). There may other processes currently servicing file transfers with different peers; you can let them finish by themselves.)
Your program should contain necessary error checking and prompt the users accordingly. For example, a peer may want to download a file from another peer, which has just exited.  

Please submit your work through moodle as one gzipped tar file. Follow the instructions below carefully (to avoid unnecessary loss of grade):

To start, first create a directory for this homework and name it firstname-lastname-homework-2 (all lower case! Of course, you'd use your real name to replace firstname and lastname).  You should place the source code and the Makefile in this directory. One should be able to create the executables for both tracker and peer programs by simply typing 'make'. The Makefile should also contain a 'clean' target for cleaning up the directory (removing all temporary files, object files and executable files). Make sure you don't include intermediate files in your submission: *.o, executables, *~, etc. (There'll be a penalty for including unnecessary intermediate files). 

To prepare for the gzipped tar file, cd to the parent directory and run the following command to create the file for submission:

% tar czvf firstname-lastname-homework-2.tar.gz firstname-lastname-homework-2

Please make sure you submit homework before the deadline. Late submission will incur penalties as specified in the syllabus. 

This homework is worth 20% of the total grade. Penalties will be applied for late submissions according to the syllabus.
